#!/bin/bash
#
[% INSERT legal/license_header %]
#
#
# This script installs NVIDIA GPU drivers.
#
# Dataproc 2.0:  Driver version 530.30.02, CUDA version 12.1.1, Rapids 23.08.2
# Dataproc 2.1:  Driver version   550.135, CUDA version 12.4.1, Rapids 24.08.1
# Dataproc 2.2:  Driver version 560.35.03, CUDA version 12.6.2, Rapids 24.08.1
#
# Additionally, it installs the RAPIDS Spark plugin, configures Spark
# and YARN, and installs an agent to collect GPU utilization metrics.
# The installer is regularly exercised with Debian, Ubuntu, and Rocky
# Linux distributions.
#
# Note that the script is designed to work both when secure boot is
# enabled with a custom image and when disabled during cluster
# creation.
#
# For details see
# github.com/GoogleCloudDataproc/custom-images/tree/main/examples/secure-boot
#

[% PROCESS common/template_disclaimer %]
[% INSERT  common/util_functions %]
[% INSERT  common/install_functions %]
[% INSERT  common/yarn_functions %]
[% INSERT  gpu/util_functions %]
[% INSERT  gpu/install_functions %]
[% INCLUDE gpu/yarn_functions %]
[% INSERT  gpu/spark_functions %]

set -euxo pipefail

function main() {
  install_gpu_driver_and_cuda

  #Install GPU metrics collection in Stackdriver if needed
  if [[ "${INSTALL_GPU_AGENT}" == "true" ]]; then
#    install_gpu_agent
    install_gpu_monitoring_agent
    echo 'GPU metrics agent successfully deployed.'
  else
    echo 'GPU metrics agent has not been installed.'
  fi
  configure_gpu_exclusive_mode

  setup_gpu_yarn

  echo "yarn setup complete"

  if [[ "${RAPIDS_RUNTIME}" == "SPARK" ]]; then
    install_spark_rapids
    echo "RAPIDS initialized with Spark runtime"
  elif [[ "${RAPIDS_RUNTIME}" == "DASK" ]]; then
    echo "This action only installs spark-rapids"
    exit 1
  else
    echo "Unrecognized RAPIDS Runtime: ${RAPIDS_RUNTIME}"
    exit 1
  fi

  echo "main complete"
  return 0
}

function exit_handler() {
  set +e
  gpu_install_exit_handler
  gpu_exit_handler
  pip_exit_handler
  yarn_exit_handler
  common_exit_handler
  return 0
}

function prepare_to_install(){
  prepare_common_env
  prepare_pip_env
  prepare_gpu_env
  prepare_gpu_install_env
  trap exit_handler EXIT
}

prepare_to_install

main
